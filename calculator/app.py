import streamlit as st
import pandas as pd
from io import BytesIO
import base64

# === –ú–∞—Å—Å–∞ –¥–µ—Ç–∞–ª–µ–π ===
DETAIL_MASS_KG = {
    "–†–∞–º–∞": 750,
    "–ë–∞–ª–∫–∞": 350,
    "–¢—è–≥–æ–≤–µ —è—Ä–º–æ": 120,
    "–ê–≤—Ç–æ–∑—á–µ–ø 1008": 135,
    "–ê–≤—Ç–æ–∑—á–µ–ø 1028": 140,
    "–ü–ª–∞—Å—Ç–∏–Ω–∞-—É–ø–æ—Ä": 18,
    "–ü–µ—Ä–µ–¥–Ω—ñ–π —É–ø–æ—Ä": 14,
    "–ó–∞–¥–Ω—ñ–π —É–ø–æ—Ä": 14
}

ALL_DETAILS = list(DETAIL_MASS_KG.keys())

# === –°–ø–∏—Å–æ–∫ —Å—Ç–∞–¥–∏–π –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ ===
PROCESS_STAGES_ORDERED = [
    "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç–∞–ª–µ–≤–æ–≥–æ –±—Ä—É—Ö—Ç—É", "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—á—ñ (—Ñ—É—Ç–µ—Ä–æ–≤–∫–∞)", "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç–æ–ø–æ—Ä–∞",
    "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–≤—à–∞ (—Ñ—É—Ç–µ—Ä–æ–≤–∫–∞)", "–í–∏–ø–ª–∞–≤–ª—è–Ω–Ω—è —Å—Ç–∞–ª—ñ", "–†–æ–∑–ª–∏–≤–∞–Ω–Ω—è —Å—Ç–∞–ª—ñ",
    "–ü—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è —Å—É–º—ñ—à–µ–π", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Å—É–º—ñ—à—ñ —Ç–∞ —Å—Ç—Ä–∏–∂–Ω—ñ–≤ –Ω–∞ –ê–§–õ",
    "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –º–æ–¥–µ–ª—å–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Ç—É, —Ç—Ä—É–±–∫–∏ —Å–∏—Ñ–æ–Ω–Ω–æ—ó",
    "–í–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ø—ñ–≤—Ñ–æ—Ä–º", "–í—ñ–¥–¥—ñ–ª–∫–∞ —ñ —Å–∫–ª–∞–¥–∞–Ω–Ω—è –Ω–∞–ø—ñ–≤—Ñ–æ—Ä–º–∏", "–ó–±–∏—Ä–∞–Ω–Ω—è —Ñ–æ—Ä–º",
    "–ó–∞–ª–∏–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º", "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–æ—Ä–º –¥–æ —Ä–æ–∑–ø–∞—Ä–æ–≤–∫–∏", "–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ñ–æ—Ä–º/—Ä–æ–∑–ø–∞—Ä–æ–≤–∫–∞",
    "–í–∏–±–∏–≤–∫–∞ –≤–∏–ª–∏–≤–æ–∫ (–ø–µ—Ä–≤–∏–Ω–Ω–∞ –æ–±—Ä—É–±–∫–∞)", "–û–±—Ä—É–±–∫–∞", "–û—á–∏—â–µ–Ω–Ω—è –¥—Ä–æ–±–æ–º–µ—Ç–Ω–µ",
    "–û–±—Ä–æ–±–∫–∞ –Ω–∞ –í–î–†", "–û–±–Ω–∞–∂–¥–∞—á—É–≤–∞–Ω–Ω—è", "–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–µ—Ñ–µ–∫—Ç—ñ–≤",
    "–ù–µ—Ä—É–π–Ω—ñ–≤–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å", "–¢–µ—Ä–º—ñ—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞", "–ó–¥–∞—á–∞ –≤–∏–ª–∏–≤–∫–∞"
]

# === –°—Ç–∞–¥–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ ===
STOP_STAGES = [
    "–û–±—Ä—É–±–∫–∞", "–ù–µ—Ä—É–π–Ω—ñ–≤–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å", "–ó–¥–∞—á–∞ –≤–∏–ª–∏–≤–∫–∞", "–û—á–∏—â–µ–Ω–Ω—è –¥—Ä–æ–±–æ–º–µ—Ç–Ω–µ",
    "–û–±–Ω–∞–∂–¥–∞—á—É–≤–∞–Ω–Ω—è", "–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–µ—Ñ–µ–∫—Ç—ñ–≤", "–û–±—Ä–æ–±–∫–∞ –Ω–∞ –í–î–†", "–í–∏–±–∏–≤–∫–∞ –≤–∏–ª–∏–≤–æ–∫ (–ø–µ—Ä–≤–∏–Ω–Ω–∞ –æ–±—Ä—É–±–∫–∞)"
]

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π ===
@st.cache_data
def load_materials():
    return pd.read_excel("materials.xlsx")

materials_df = load_materials()

st.subheader("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å–æ–±i–≤–∞—Ä—Ç–æ—Å—Çi –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤")

# === CSS –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ ===
st.markdown(
    """
    <style>
    /* –∑–µ–ª—ë–Ω–∞—è –∫–Ω–æ–ø–∫–∞ Excel */
    div[data-testid="stDownloadButton"] > button {
        background-color: #79ab7c !important;
        color: white !important;
        padding: 12px 24px;
        font-size: 16px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }
    div[data-testid="stDownloadButton"] > button:hover {
        background-color: #45a049 !important;
        color: white !important;
    }

    /* —Å–∏–Ω—è—è –∫–Ω–æ–ø–∫–∞ –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ */
    div[data-testid="stButton"] > button:has(span:contains("–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏")) {
        background-color: #008CBA !important;
        color: white !important;
        padding: 12px 24px;
        font-size: 16px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }
    div[data-testid="stButton"] > button:has(span:contains("–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏")):hover {
        background-color: #007bb5 !important;
        color: white !important;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π ===
if "available_details" not in st.session_state:
    st.session_state.available_details = ["–†–∞–º–∞"]  # –ø–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –†–∞–º–∞

# === –í—ã–±–æ—Ä –¥–µ—Ç–∞–ª–∏ ===
select_options = []
for d in ALL_DETAILS:
    if d in st.session_state.available_details:
        select_options.append(d)
    else:
        select_options.append(f"{d} (–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ)")

selected_raw = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –¥–µ—Ç–∞–ª—å:", options=select_options)

if selected_raw.endswith("(–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ)"):
    st.warning("–¶—è –¥–µ—Ç–∞–ª—å –ø–æ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É.")
    selected_detail = st.session_state.available_details[0]
else:
    selected_detail = selected_raw

detail_mass = DETAIL_MASS_KG[selected_detail]
st.info(f"–ú–∞—Å–∞ —Ä—ñ–¥–∫–æ—ó —Å—Ç–∞–ª—ñ –¥–ª—è –æ–¥–Ω—ñ—î—ó –¥–µ—Ç–∞–ª—ñ: {detail_mass} –∫–≥")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π ===
if "iterations" not in st.session_state:
    st.session_state.iterations = [{
        "stage": STOP_STAGES[0],
        "qty": 0,
        "result": None,
        "sum": 0.0
    }]

# === –§—É–Ω–∫—Ü–∏–∏ ===
def compute_iteration(detail_mass, stage_name, qty):
    idx_stage = PROCESS_STAGES_ORDERED.index(stage_name)
    stages_to_calc = PROCESS_STAGES_ORDERED[:idx_stage+1]

    stage_df = materials_df[materials_df["process_stage"].isin(stages_to_calc)].copy()
    stage_df["price"] = stage_df["price"].fillna(0)
    stage_df["quantity"] = stage_df["rate_per_kg"] * detail_mass * qty
    stage_df["total_cost"] = (stage_df["quantity"] * stage_df["price"]).round(2)
    stage_df["–ø–æ—Ä—Ü—ñ—è –¥–µ—Ç–∞–ª–µ–π"] = f"{qty} —à—Ç. –¥–æ {stage_name}"
    stage_df["–º–∞—Å–∞ —Ä—ñ–¥–∫–æ—ó —Å—Ç–∞–ª—ñ –Ω–∞ –ø–æ—Ä—Ü—ñ—é, –∫–≥"] = detail_mass * qty

    nice = stage_df[[
        "operation_name", "unit", "price", "quantity", "total_cost",
        "process_stage", "–ø–æ—Ä—Ü—ñ—è –¥–µ—Ç–∞–ª–µ–π", "–º–∞—Å–∞ —Ä—ñ–¥–∫–æ—ó —Å—Ç–∞–ª—ñ –Ω–∞ –ø–æ—Ä—Ü—ñ—é, –∫–≥"
    ]].copy()
    nice.columns = [
        "–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è", "–û–¥–∏–Ω–∏—Ü—è", "–¶—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é, –≥—Ä–Ω.", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å",
        "–í–∞—Ä—Ç—ñ—Å—Ç—å, –≥—Ä–Ω.", "–°—Ç–∞–¥—ñ—è –ø—Ä–æ—Ü–µ—Å—É", "–ü–æ—Ä—Ü—ñ—è –¥–µ—Ç–∞–ª–µ–π", "–ú–∞—Å–∞ —Ä—ñ–¥–∫–æ—ó —Å—Ç–∞–ª—ñ, –∫–≥"
    ]
    nice = nice.reset_index(drop=True)
    nice.index += 1
    nice.index.name = "‚Ññ"

    s = float(nice["–í–∞—Ä—Ç—ñ—Å—Ç—å, –≥—Ä–Ω."].sum().round(2))
    return nice, s

def to_excel_single(portion_df, total_sum, selected_detail, portion_name):
    output = BytesIO()
    with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
        workbook  = writer.book
        worksheet = workbook.add_worksheet("–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏")
        writer.sheets["–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏"] = worksheet

        bold = workbook.add_format({"bold": True})
        money_fmt = workbook.add_format({"num_format": "#,##0.00"})

        title = f"–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –¥–ª—è {selected_detail} ({portion_name})"
        worksheet.write("A1", title, bold)

        for col_num, col_name in enumerate(portion_df.columns):
            worksheet.write(2, col_num, col_name, bold)

        for i in range(len(portion_df)):
            for col_num, val in enumerate(portion_df.iloc[i]):
                if isinstance(val, (int, float)):
                    worksheet.write(i+3, col_num, val, money_fmt)
                else:
                    worksheet.write(i+3, col_num, val)

        worksheet.write(len(portion_df)+4, 1, "–°—É–º–∞—Ä–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å, –≥—Ä–Ω.:", bold)
        cost_col = portion_df.columns.get_loc("–í–∞—Ä—Ç—ñ—Å—Ç—å, –≥—Ä–Ω.")
        worksheet.write(len(portion_df)+4, cost_col, total_sum, bold)

        for i, col in enumerate(portion_df.columns):
            max_len = max([len(str(s)) for s in portion_df[col]] + [len(col)])
            worksheet.set_column(i, i, max_len + 2)

    output.seek(0)
    return output

def insert_iteration_after(idx):
    st.session_state.iterations.insert(
        idx + 1,
        {"stage": STOP_STAGES[0], "qty": 0, "result": None, "sum": 0.0}
    )


# === –†–µ–Ω–¥–µ—Ä –∏—Ç–µ—Ä–∞—Ü–∏–π ===
for idx, it in enumerate(st.session_state.iterations):
    st.markdown(f"##### –ì—Ä—É–ø–∞ {idx + 1}")

    stage_key = f"stage_{idx}"
    qty_key   = f"qty_{idx}"

    if stage_key not in st.session_state:
        st.session_state[stage_key] = it["stage"]
    if qty_key not in st.session_state:
        st.session_state[qty_key] = it["qty"]

    c1, c2, c3 = st.columns([3, 2, 1])
    with c1:
        st.selectbox("–°—Ç–∞–¥—ñ—è –∑—É–ø–∏–Ω–∫–∏:", STOP_STAGES, key=stage_key)
    with c2:
        st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–µ—Ç–∞–ª–µ–π:", min_value=0, step=1, key=qty_key)
    with c3:
        if idx > 0:  # –ø–µ—Ä–≤—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é –Ω–µ —É–¥–∞–ª—è–µ–º
            if st.button("‚ùå", key=f"remove_{idx}"):
                st.session_state.iterations.pop(idx)
                st.rerun()

    it["stage"] = st.session_state[stage_key]
    it["qty"]   = st.session_state[qty_key]

    if st.button("–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏", key=f"calc_{idx}"):
        if it["qty"] <= 0:
            st.warning("–í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±—ñ–ª—å—à–µ –Ω—É–ª—è, —â–æ–± –≤–∏–∫–æ–Ω–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫.")
        else:
            nice_df, ssum = compute_iteration(detail_mass, it["stage"], it["qty"])
            it["result"] = nice_df
            it["sum"] = ssum
            st.rerun()

    if it["result"] is not None:
        st.dataframe(it["result"], use_container_width=True)
        formatted_sum = f"{it['sum']:,.2f}".replace(",", " ").replace(".", ",")
        st.write(f"**–°—É–º–∞—Ä–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –º–∞—Ç–µ—Äi–∞–ªi–≤: {formatted_sum} –≥—Ä–Ω.**")

        portion_name = it["result"]["–ü–æ—Ä—Ü—ñ—è –¥–µ—Ç–∞–ª–µ–π"].iloc[0]

        c1, c2 = st.columns([1, 1])
        with c1:
            st.download_button(
                label="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ Excel",
                data=to_excel_single(it["result"], it["sum"], selected_detail, portion_name),
                file_name=f"–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏_{selected_detail}_—ñ—Ç–µ—Ä–∞—Ü—ñ—è_{idx+1}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                key=f"save_{idx}"
            )
        with c2:
            if st.button("‚ûï –î–æ–¥–∞—Ç–∏ —ñ—Ç–µ—Ä–∞—Ü—ñ—é", key=f"add_{idx}"):
                insert_iteration_after(idx)
                st.rerun()


    st.divider()
