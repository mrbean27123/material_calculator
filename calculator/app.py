import streamlit as st
import pandas as pd
from io import BytesIO

# === –ú–∞—Å—Å–∞ –¥–µ—Ç–∞–ª–µ–π ===
DETAIL_MASS_KG = {
    "–†–∞–º–∞": 8500,
    "–ë–∞–ª–∫–∞": 3500,
    "–¢—è–≥–æ–≤–µ —è—Ä–º–æ": 1200,
    "–ê–≤—Ç–æ–∑—á–µ–ø 1008": 1350,
    "–ê–≤—Ç–æ–∑—á–µ–ø 1028": 1400,
    "–ü–ª–∞—Å—Ç–∏–Ω–∞-—É–ø–æ—Ä": 180,
    "–ü–µ—Ä–µ–¥–Ω—ñ–π —É–ø–æ—Ä": 140,
    "–ó–∞–¥–Ω—ñ–π —É–ø–æ—Ä": 140
}

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π ===
@st.cache_data
def load_materials():
    return pd.read_excel("material.xlsx")

materials_df = load_materials()

st.title("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤")

# === –®–∞–≥ 1: –í—ã–±–æ—Ä –¥–µ—Ç–∞–ª–∏ ===
selected_detail = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –¥–µ—Ç–∞–ª—å:", list(DETAIL_MASS_KG.keys()))
detail_mass = DETAIL_MASS_KG[selected_detail]

# === –®–∞–≥ 2: –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–∞–ª–µ–π ===
count = st.number_input("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–µ—Ç–∞–ª–µ–π:", min_value=1, value=1)

# === –®–∞–≥ 3: –í–≤–æ–¥ –º–∞—Å—Å—ã —Å—Ç–∞–ª–∏ ===
mass_kg = st.number_input("–í–≤–µ–¥—ñ—Ç—å –º–∞—Å—É —Ä—ñ–¥–∫–æ—ó —Å—Ç–∞–ª—ñ (–∫–≥)", min_value=1.0, step=0.1)

total_mass = mass_kg * count
st.markdown(f"**–ó–∞–≥–∞–ª—å–Ω–∞ –º–∞—Å–∞ —Ä—ñ–¥–∫–æ—ó —Å—Ç–∞–ª—ñ:** {total_mass} –∫–≥")

# === –®–∞–≥ 3: –í—ã–±–æ—Ä —Å—Ç–∞–¥–∏–π –ø—Ä–æ—Ü–µ—Å—Å–∞ ===
available_stages = materials_df["process_stage"].dropna().unique().tolist()
selected_stages = st.multiselect("–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞–¥—ñ—ó –ø—Ä–æ—Ü–µ—Å—É:", available_stages)

# === –®–∞–≥ 4: –í—ã–±–æ—Ä —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –¥–ª—è —Å—Ç–∞–¥–∏–π ===
spec_selection = {}
for stage in selected_stages:
    specs = materials_df[materials_df["process_stage"] == stage]["spec_version"].dropna().unique().tolist()
    if specs:
        selected_spec = st.selectbox(f"–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –¥–ª—è —Å—Ç–∞–¥—ñ—ó '{stage}':", specs, key=stage)
        spec_selection[stage] = selected_spec

# === –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ ===
if st.button("–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏"):
    result_rows = []
    for stage, spec in spec_selection.items():
        stage_df = materials_df[
            (materials_df["process_stage"] == stage) &
            (materials_df["spec_version"] == spec)
        ]
        result_rows.append(stage_df)

    if result_rows:
        final_df = pd.concat(result_rows)
        final_df["quantity"] = final_df["rate_per_kg"] * total_mass
        final_df["price"] = final_df["price"].fillna(0)
        final_df["total_cost"] = (final_df["quantity"] * final_df["price"]).round(2)

        # === –§–∏–Ω–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ ===
        result = final_df[["operation_name", "unit", "price", "quantity", "total_cost", "process_stage"]].copy()
        result.columns = ["–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è", "–û–¥–∏–Ω–∏—Ü—è", "–¶—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é, –≥—Ä–Ω.", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å", "–í–∞—Ä—Ç—ñ—Å—Ç—å, –≥—Ä–Ω.", "–°—Ç–∞–¥—ñ—è –ø—Ä–æ—Ü–µ—Å—É"]
        result = result.reset_index(drop=True)
        result.index += 1
        result.index.name = "‚Ññ"

        st.markdown("**–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É:**")
        st.dataframe(result, use_container_width=True)

        # === –°—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å ===
        total_sum = result["–í–∞—Ä—Ç—ñ—Å—Ç—å, –≥—Ä–Ω."].sum().round(2)
        st.subheader(f"**–°—É–º–∞—Ä–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –≤—Å—ñ—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤: {total_sum:.2f} –≥—Ä–Ω.**")

        # === –°–∫–∞—á–∞—Ç—å Excel ===
        def to_excel(dataframe,total_sum):
            output = BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                dataframe.to_excel(writer, index=True, startrow=2, sheet_name="–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏")
                workbook = writer.book
                worksheet = writer.sheets["–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏"]
                bold = workbook.add_format({'bold': True})
                title = f"–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –Ω–∞ {total_mass:.1f} –∫–≥ —Å—Ç–∞–ª—ñ"
                worksheet.write("A1", title, bold)

                # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º–∞—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–Ω–∏–∑—É —Ç–∞–±–ª–∏—Ü—ã
                last_row = len(dataframe) + 4  # 2 —Å—Ç—Ä–æ–∫–∏ —Å–º–µ—â–µ–Ω–∏–µ + 1 –∑–∞–≥–æ–ª–æ–≤–æ–∫ + 1 –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞
                worksheet.write(f"B{last_row}", "–°—É–º–∞—Ä–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å, –≥—Ä–Ω.:", bold)
                worksheet.write(f"F{last_row}", total_sum, bold)

            output.seek(0)
            return output

        excel_file = to_excel(result, total_sum)
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç–∏ Excel",
            data=excel_file,
            file_name=f"—Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫_{selected_detail}_{int(total_mass)}–∫–≥.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    else:
        st.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö —Å—Ç–∞–¥—ñ–π.")