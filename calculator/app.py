
import streamlit as st
import pandas as pd
from io import BytesIO

# === –ú–∞—Å—Å–∞ –¥–µ—Ç–∞–ª–µ–π ===
DETAIL_MASS_KG = {
    "–†–∞–º–∞": 7500,
    "–ë–∞–ª–∫–∞": 3500,
    "–¢—è–≥–æ–≤–µ —è—Ä–º–æ": 1200,
    "–ê–≤—Ç–æ–∑—á–µ–ø 1008": 1350,
    "–ê–≤—Ç–æ–∑—á–µ–ø 1028": 1400,
    "–ü–ª–∞—Å—Ç–∏–Ω–∞-—É–ø–æ—Ä": 180,
    "–ü–µ—Ä–µ–¥–Ω—ñ–π —É–ø–æ—Ä": 140,
    "–ó–∞–¥–Ω—ñ–π —É–ø–æ—Ä": 140
}

ALL_DETAILS = list(DETAIL_MASS_KG.keys())

# === –°–ø–∏—Å–æ–∫ —Å—Ç–∞–¥–∏–π –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ ===
PROCESS_STAGES_ORDERED = [
    "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç–∞–ª–µ–≤–æ–≥–æ –±—Ä—É—Ö—Ç—É", "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—á—ñ (—Ñ—É—Ç–µ—Ä–æ–≤–∫–∞)", "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç–æ–ø–æ—Ä–∞",
    "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–≤—à–∞ (—Ñ—É—Ç–µ—Ä–æ–≤–∫–∞)", "–í–∏–ø–ª–∞–≤–ª—è–Ω–Ω—è —Å—Ç–∞–ª—ñ", "–†–æ–∑–ª–∏–≤–∞–Ω–Ω—è —Å—Ç–∞–ª—ñ",
    "–ü—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è —Å—É–º—ñ—à–µ–π", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Å—É–º—ñ—à—ñ —Ç–∞ —Å—Ç—Ä–∏–∂–Ω—ñ–≤ –Ω–∞ –ê–§–õ",
    "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –º–æ–¥–µ–ª—å–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Ç—É, —Ç—Ä—É–±–∫–∏ —Å–∏—Ñ–æ–Ω–Ω–æ—ó",
    "–í–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ø—ñ–≤—Ñ–æ—Ä–º", "–í—ñ–¥–¥—ñ–ª–∫–∞ —ñ —Å–∫–ª–∞–¥–∞–Ω–Ω—è –Ω–∞–ø—ñ–≤—Ñ–æ—Ä–º–∏", "–ó–±–∏—Ä–∞–Ω–Ω—è —Ñ–æ—Ä–º",
    "–ó–∞–ª–∏–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º", "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–æ—Ä–º –¥–æ —Ä–æ–∑–ø–∞—Ä–æ–≤–∫–∏", "–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ñ–æ—Ä–º/—Ä–æ–∑–ø–∞—Ä–æ–≤–∫–∞",
    "–í–∏–±–∏–≤–∫–∞ –≤–∏–ª–∏–≤–æ–∫ (–ø–µ—Ä–≤–∏–Ω–Ω–∞ –æ–±—Ä—É–±–∫–∞)", "–û–±—Ä—É–±–∫–∞", "–û—á–∏—â–µ–Ω–Ω—è –¥—Ä–æ–±–æ–º–µ—Ç–Ω–µ",
    "–û–±—Ä–æ–±–∫–∞ –Ω–∞ –í–î–†", "–û–±–Ω–∞–∂–¥–∞—á—É–≤–∞–Ω–Ω—è", "–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–µ—Ñ–µ–∫—Ç—ñ–≤",
    "–ù–µ—Ä—É–π–Ω—ñ–≤–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å", "–¢–µ—Ä–º—ñ—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞", "–ó–¥–∞—á–∞ –≤–∏–ª–∏–≤–∫–∞"
]

# === –°—Ç–∞–¥–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ ===
STOP_STAGES = [
    "–û–±—Ä—É–±–∫–∞", "–ù–µ—Ä—É–π–Ω—ñ–≤–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å", "–ó–¥–∞—á–∞ –≤–∏–ª–∏–≤–∫–∞", "–û—á–∏—â–µ–Ω–Ω—è –¥—Ä–æ–±–æ–º–µ—Ç–Ω–µ",
    "–û–±–Ω–∞–∂–¥–∞—á—É–≤–∞–Ω–Ω—è", "–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–µ—Ñ–µ–∫—Ç—ñ–≤", "–û–±—Ä–æ–±–∫–∞ –Ω–∞ –í–î–†", "–í–∏–±–∏–≤–∫–∞ –≤–∏–ª–∏–≤–æ–∫ (–ø–µ—Ä–≤–∏–Ω–Ω–∞ –æ–±—Ä—É–±–∫–∞)"
]

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π ===
@st.cache_data
def load_materials():
    return pd.read_excel("material.xlsx")

materials_df = load_materials()

st.subheader("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å–æ–±i–≤–∞—Ä—Ç–æ—Å—Çi –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π ===
if "available_details" not in st.session_state:
    st.session_state.available_details = ["–†–∞–º–∞"]  # –ø–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –†–∞–º–∞

# === –í—ã–±–æ—Ä –¥–µ—Ç–∞–ª–∏ ===
# –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è selectbox —Å –ø–æ–º–µ—Ç–∫–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π 

select_options = []
for d in ALL_DETAILS:
    if d in st.session_state.available_details:
        select_options.append(d)
    else:
        select_options.append(f"{d} (–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ)")

selected_raw = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –¥–µ—Ç–∞–ª—å:", options=select_options)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä
if selected_raw.endswith("(–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ)"):
    st.warning("–¶—è –¥–µ—Ç–∞–ª—å –ø–æ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É.")
    selected_detail = st.session_state.available_details[0]
else:
    selected_detail = selected_raw

detail_mass = DETAIL_MASS_KG[selected_detail]
st.info(f"–ú–∞—Å–∞ —Ä—ñ–¥–∫–æ—ó —Å—Ç–∞–ª—ñ –¥–ª—è –æ–¥–Ω—ñ—î—ó –¥–µ—Ç–∞–ª—ñ: {detail_mass} –∫–≥")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–π ===
if "iterations" not in st.session_state:
    st.session_state.iterations = []


# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ ===
def add_iteration():
    st.session_state.iterations.append({"stage": STOP_STAGES[0], "qty": 0})

def remove_iteration(idx):
    if idx < len(st.session_state.iterations):
        st.session_state.iterations.pop(idx)

# === –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ ===
st.button("–î–æ–¥–∞—Ç–∏ –ø–æ—Ä—Ü—ñ—é –¥–µ—Ç–∞–ª–µ–π", on_click=add_iteration)

# === –í—ã–≤–æ–¥ –≤—Å–µ—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π  ===
for idx, _ in enumerate(st.session_state.iterations):
    st.markdown(f"**–Ü—Ç–µ—Ä–∞—Ü—ñ—è {idx+1}**")
    col1, col2, col3 = st.columns([4, 3, 1])

    stage_key = f"stage_{idx}"
    qty_key   = f"qty_{idx}"

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
    if stage_key not in st.session_state:
        st.session_state[stage_key] = st.session_state.iterations[idx]["stage"]
    if qty_key not in st.session_state:
        st.session_state[qty_key] = st.session_state.iterations[idx]["qty"]

    with col1:
        st.selectbox(
            f"–°—Ç–∞–¥—ñ—è –∑—É–ø–∏–Ω–∫–∏ (—ñ—Ç–µ—Ä–∞—Ü—ñ—è {idx+1}):",
            STOP_STAGES,
            key=stage_key  # –±–µ–∑ index/value –Ω–∞ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞—Ö
        )
    with col2:
        st.number_input(
            f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–µ—Ç–∞–ª–µ–π –Ω–∞ —Ü—ñ–π —Å—Ç–∞–¥—ñ—ó:",
            min_value=0,
            step=1,
            key=qty_key    # –±–µ–∑ value=...
        )
    with col3:
        if st.button("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏", key=f"remove_{idx}"):
            remove_iteration(idx)
            st.rerun()

    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –∏—Ç–µ—Ä–∞—Ü–∏–π
    st.session_state.iterations[idx]["stage"] = st.session_state[stage_key]
    st.session_state.iterations[idx]["qty"]   = st.session_state[qty_key]

# === –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ ===
if st.button("–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏"):
    all_results = []

    for it in st.session_state.iterations:
        stage_name = it["stage"]
        qty = it["qty"]
        if qty == 0:
            continue

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ —Å—Ç–∞–¥–∏–∏ –¥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
        idx_stage = PROCESS_STAGES_ORDERED.index(stage_name)
        stages_to_calc = PROCESS_STAGES_ORDERED[:idx_stage+1]

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–∏—Ö —Å—Ç–∞–¥–∏–π
        stage_df = materials_df[materials_df["process_stage"].isin(stages_to_calc)].copy()
        stage_df["quantity"] = stage_df["rate_per_kg"] * detail_mass * qty
        stage_df["price"] = stage_df["price"].fillna(0)
        stage_df["total_cost"] = (stage_df["quantity"] * stage_df["price"]).round(2)
        stage_df["–ø–æ—Ä—Ü—ñ—è –¥–µ—Ç–∞–ª–µ–π"] = f"{qty} —à—Ç. –¥–æ {stage_name}"
        stage_df["–º–∞—Å–∞ —Ä—ñ–¥–∫–æ—ó —Å—Ç–∞–ª—ñ –Ω–∞ –ø–æ—Ä—Ü—ñ—é, –∫–≥"] = detail_mass * qty

        all_results.append(stage_df)

    if all_results:
        final_df = pd.concat(all_results)
        result = final_df[["operation_name", "unit", "price", "quantity", "total_cost",
                           "process_stage", "–ø–æ—Ä—Ü—ñ—è –¥–µ—Ç–∞–ª–µ–π", "–º–∞—Å–∞ —Ä—ñ–¥–∫–æ—ó —Å—Ç–∞–ª—ñ –Ω–∞ –ø–æ—Ä—Ü—ñ—é, –∫–≥"]].copy()
        result.columns = ["–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è", "–û–¥–∏–Ω–∏—Ü—è", "–¶—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é, –≥—Ä–Ω.", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å",
                          "–í–∞—Ä—Ç—ñ—Å—Ç—å, –≥—Ä–Ω.", "–°—Ç–∞–¥—ñ—è –ø—Ä–æ—Ü–µ—Å—É", "–ü–æ—Ä—Ü—ñ—è –¥–µ—Ç–∞–ª–µ–π", "–ú–∞—Å–∞ —Ä—ñ–¥–∫–æ—ó —Å—Ç–∞–ª—ñ, –∫–≥"]
        result = result.reset_index(drop=True)
        result.index += 1
        result.index.name = "‚Ññ"

        st.markdown("**–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É:**")
        st.dataframe(result, use_container_width=True)

        total_sum = result["–í–∞—Ä—Ç—ñ—Å—Ç—å, –≥—Ä–Ω."].sum().round(2)
        st.subheader(f"**–°—É–º–∞—Ä–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –≤—Å—ñ—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤: {total_sum:.2f} –≥—Ä–Ω.**")

        # === –°–∫–∞—á–∞—Ç—å Excel ===
        def to_excel(dataframe, total_sum, selected_detail):
            output = BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                # –ø–∏—à–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –Ω–∞—á–∏–Ω–∞—è —Å–æ 2-–π —Å—Ç—Ä–æ–∫–∏ (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
                dataframe.to_excel(writer, index=True, startrow=2, sheet_name="–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏")
                workbook  = writer.book
                worksheet = writer.sheets["–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏"]

                bold = workbook.add_format({'bold': True})
                money_fmt = workbook.add_format({'num_format': '#,##0.00', 'bold': False})

                # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                title = f"–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –¥–ª—è {selected_detail}"
                worksheet.write("A1", title, bold)

                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                qty_col   = dataframe.columns.get_loc("–ö—ñ–ª—å–∫—ñ—Å—Ç—å") + 2  # +2, —Ç.–∫. –≤ xlsxwriter –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ = A, –∏ index=True
                cost_col  = dataframe.columns.get_loc("–í–∞—Ä—Ç—ñ—Å—Ç—å, –≥—Ä–Ω.") + 2
                price_col = dataframe.columns.get_loc("–¶—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é, –≥—Ä–Ω.") + 2

                # –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç
                worksheet.set_column(qty_col-1, qty_col-1, 15, money_fmt)
                worksheet.set_column(cost_col-1, cost_col-1, 18, money_fmt)
                worksheet.set_column(price_col-1, price_col-1, 18, money_fmt)

                # –ò—Ç–æ–≥ –≤–Ω–∏–∑—É
                last_row = len(dataframe) + 4
                worksheet.write(last_row, 1, "–°—É–º–∞—Ä–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å, –≥—Ä–Ω.:", bold)
                worksheet.write(last_row, cost_col-1, total_sum, bold)

                # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
                for i, col in enumerate(dataframe.reset_index().columns):
                    max_len = max(
                        [len(str(s)) for s in dataframe.reset_index()[col]] + [len(col)]
                    )
                    worksheet.set_column(i, i, max_len + 2)

            output.seek(0)
            return output

        excel_file = to_excel(result, total_sum, selected_detail)
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç–∏ Excel",
            data=excel_file,
            file_name=f"—Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫_{selected_detail}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )




        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –≤ —ç–∫—Å–µ–ª—å –ø–∏—Å–∞–ª—Å—è –∫–∞–∂–¥—ã–π –±–ª–æ–∫ —Ä–∞—Å—á–µ—Ç–æ–≤ –ø–æ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ

        # def to_excel(dataframe, total_sum, selected_detail):
        #     output = BytesIO()
        #     with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        #         workbook  = writer.book
        #         worksheet = workbook.add_worksheet("–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏")
        #         writer.sheets["–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏"] = worksheet

        #         bold = workbook.add_format({'bold': True})
        #         money_fmt = workbook.add_format({'num_format': '#,##0.00'})

        #         # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        #         title = f"–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –¥–ª—è {selected_detail}"
        #         worksheet.write("A1", title, bold)

        #         row_offset = 2  # –Ω–∞—á–∏–Ω–∞–µ–º —Å 3-–π —Å—Ç—Ä–æ–∫–∏

        #         for portion in dataframe["–ü–æ—Ä—Ü—ñ—è –¥–µ—Ç–∞–ª–µ–π"].unique():
        #             portion_df = dataframe[dataframe["–ü–æ—Ä—Ü—ñ—è –¥–µ—Ç–∞–ª–µ–π"] == portion]
        #             # –ø–æ–¥–ø–∏—Å—å –±–ª–æ–∫–∞
        #             worksheet.write(row_offset, 0, f"–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è: {portion}", bold)
        #             row_offset += 1

        #             # –ø–∏—à–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
        #             for col_num, col_name in enumerate(portion_df.columns):
        #                 worksheet.write(row_offset, col_num, col_name, bold)
        #             row_offset += 1

        #             # –ø–∏—à–µ–º –¥–∞–Ω–Ω—ã–µ
        #             for i in range(len(portion_df)):
        #                 for col_num, val in enumerate(portion_df.iloc[i]):
        #                     # –µ—Å–ª–∏ —á–∏—Å–ª–æ–≤–æ–µ –ø–æ–ª–µ, –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        #                     if isinstance(val, (int, float)):
        #                         worksheet.write(row_offset, col_num, val, money_fmt)
        #                     else:
        #                         worksheet.write(row_offset, col_num, val)
        #                 row_offset += 1

        #             # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –±–ª–æ–∫–∞
        #             row_offset += 1

        #         # –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
        #         worksheet.write(row_offset, 1, "–°—É–º–∞—Ä–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å, –≥—Ä–Ω.:", bold)
        #         # –Ω–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ "–í–∞—Ä—Ç—ñ—Å—Ç—å, –≥—Ä–Ω."
        #         cost_col = dataframe.columns.get_loc("–í–∞—Ä—Ç—ñ—Å—Ç—å, –≥—Ä–Ω.")
        #         worksheet.write(row_offset, cost_col, total_sum, bold)

        #         # –∞–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        #         for i, col in enumerate(dataframe.columns):
        #             max_len = max(
        #                 [len(str(s)) for s in dataframe[col]] + [len(col)]
        #             )
        #             worksheet.set_column(i, i, max_len + 2)

        #     output.seek(0)
        #     return output